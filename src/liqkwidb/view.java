/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package liqkwidb;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author manuel
 */
public class view extends javax.swing.JFrame {

    /**
     * Creates new form view
     */
    public view() {
        initComponents();
        appOnLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileDialog = new javax.swing.JFileChooser();
        PopUp = new javax.swing.JFrame();
        btnClose = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblJDBC_URL = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbSnippets = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtScript = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        lblFilepath = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnUpdateSQL = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        PopUp.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        PopUp.setTitle("SQL result from XML script");
        PopUp.setAlwaysOnTop(true);
        PopUp.setMinimumSize(new java.awt.Dimension(800, 600));

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane2.setViewportView(txtOutput);

        javax.swing.GroupLayout PopUpLayout = new javax.swing.GroupLayout(PopUp.getContentPane());
        PopUp.getContentPane().setLayout(PopUpLayout);
        PopUpLayout.setHorizontalGroup(
            PopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PopUpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PopUpLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        PopUpLayout.setVerticalGroup(
            PopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PopUpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClose)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LiqkwiDB - GUI for Liquibase");
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setType(java.awt.Window.Type.UTILITY);

        jLabel1.setText("JDBC URL:");

        lblJDBC_URL.setText("...");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Build script"));

        jLabel2.setText("Snippet:");

        cbSnippets.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAdd.setText("+");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtScript.setColumns(20);
        txtScript.setRows(5);
        jScrollPane1.setViewportView(txtScript);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnOpen.setText("Load script");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(btnReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbSnippets, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFilepath)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen)
                    .addComponent(lblFilepath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbSnippets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnUpdateSQL.setText("UpdateSQL");
        btnUpdateSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateSQLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblJDBC_URL)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdateSQL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblJDBC_URL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnUpdateSQL))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Update", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 705, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Rollback", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        executeCommand("update");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Append chosen snippet to script
        String path = "snippets/";
        String selectedSnippet = (String) cbSnippets.getSelectedItem();
        
        Document doc = parseXMLfile(path + selectedSnippet + ".xml");
        doc = setChangeSetAttributes(doc);
        
        txtScript.insert(documentToString(doc), txtScript.getCaretPosition());
    }//GEN-LAST:event_btnAddActionPerformed

    private void writeFile(File filename) {
        try {
            BufferedWriter outFile = new BufferedWriter(new FileWriter(filename));
            
            String data = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
            data += txtScript.getText();
            
            outFile.write(data);
            outFile.flush();
            outFile.close();
        } catch (IOException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        FileFilter fileFilter = new FileNameExtensionFilter("XML Files", "xml");
        FileDialog.addChoosableFileFilter(fileFilter);
        FileDialog.setCurrentDirectory(new File(System.getProperty("user.dir")));
        
        if (FileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                // Inidcates whether the user still wants to export
                boolean doExport = true;
                
                // Indicates whether to override an already existing file
                boolean overrideExistingFile = false;
                
                // Get destination file
                File destinationFile = new File(FileDialog.getSelectedFile().getCanonicalPath());
                
                // Check if file already exists
                while (doExport && destinationFile.exists() && !overrideExistingFile) {
                    // Let the user decide whether to override the existing file
                    overrideExistingFile = (JOptionPane.showConfirmDialog(this, "Replace file?", "Save Script", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION);
                    
                    // Let the user choose another file if the existing file shall not be overridden
                    if (!overrideExistingFile) {
                        if (FileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                            try {
                                // Get new destination file
                                destinationFile = new File(FileDialog.getSelectedFile().getCanonicalPath());
                            } catch (IOException ex) {
                                Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        else {
                            // Seems like the user does not want to export any longer
                            doExport = false;
                        }
                    }
                }
                
                // Perform the actual export
                if (doExport) {
                    writeFile(destinationFile);
                    
                    try {
                        lblFilepath.setText(destinationFile.getCanonicalPath());
                    } catch (IOException ex) {
                        Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    enableDisableUpdateButton(true);
                    populateCombobox(snippetList());
                }
            } catch (IOException ex) {
                Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void resetTextArea() {
        txtScript.setText(""); // Clearing JTextArea
        loadTemplate();
    }
    
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        resetTextArea();
        lblFilepath.setText("");
        enableDisableUpdateButton(false);
    }//GEN-LAST:event_btnResetActionPerformed

    private String createTempFile() {
        String filepath = null;
        
        try {
            File temp = File.createTempFile("tempScript", ".xml");
            temp.deleteOnExit();
            
            writeFile(temp);
            
            filepath = temp.getCanonicalPath();
        } catch (IOException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return filepath;
    }
    
    private void executeCommand(String command) {
        String changeLogFile = lblFilepath.getText();
        
        if (changeLogFile.equals("") || changeLogFile == null) {
            changeLogFile = createTempFile();
        }
        
        if (changeLogFile == null) { return; }
        
        List<String> params = new ArrayList<String>();
        
        params.add("--changeLogFile=" + changeLogFile);
        
        try {
            txtOutput.setText(ExecCommand.exec(command, params));
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        PopUp.setVisible(true);
    }
    
    private void btnUpdateSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateSQLActionPerformed
        executeCommand("updateSQL");
    }//GEN-LAST:event_btnUpdateSQLActionPerformed

    private void enableDisableUpdateButton(boolean status) {
        btnUpdate.setEnabled(status);
    }
    
    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        FileFilter fileFilter = new FileNameExtensionFilter("XML Files", "xml");
        FileDialog.addChoosableFileFilter(fileFilter);
        FileDialog.setCurrentDirectory(new File(System.getProperty("user.dir")));
        
        txtScript.setText("");
        
        if (FileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = FileDialog.getSelectedFile();
                
                Document doc = parseXMLfile(selectedFile.getCanonicalPath());
                
                txtScript.append(documentToString(doc));
                txtScript.setCaretPosition(txtScript.getCaretPosition() - 22); // Move cursor
                txtScript.requestFocus();
                
                lblFilepath.setText(selectedFile.getAbsolutePath());
                
                enableDisableUpdateButton(true);
            } catch (IOException ex) {
                resetTextArea();
                Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        PopUp.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new view().setVisible(true);
            }
        });
    }
    
    private Document parseXMLfile(String file) {
        File XMLfile = new File(file);
        
        // Get the factory
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        Document dom = null;
        
        try {
            // Using factory get an instance of document builder
            DocumentBuilder db = dbf.newDocumentBuilder();
            
            // Parse using builder to get DOM representation of the XML file
            dom = db.parse(XMLfile);
            dom.getDocumentElement().normalize();
        }
        catch (ParserConfigurationException | SAXException | IOException ex) {
        }
        
        return dom;
    }
    
    private String documentToString(Document doc) {
        try {
            StringWriter sw = new StringWriter();
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            
            transformer.transform(new DOMSource(doc), new StreamResult(sw));
            
            return sw.toString();
        } catch (IllegalArgumentException | TransformerException ex) {
            throw new RuntimeException("Error converting to String", ex);
        }
    }
    
    private Document setAttribute(Document doc, String tag, String attribute, String value) {
        // Put/Modify custom attribute
        
        NodeList nodeList = doc.getElementsByTagName(tag);
        Node attrib = nodeList.item(0);
        Element elem = (Element) attrib;
        elem.setAttribute(attribute, value);
        
        return doc;
    }
    
    private Document setChangeSetAttributes(Document doc) {
        // Put/Modify author attribute. <changeSet author="username">
        
        NodeList changeSets = doc.getElementsByTagName("changeSet");
        Node attrib = changeSets.item(0);
        Element elem = (Element) attrib;
        elem.setAttribute("author", System.getProperty("user.name"));
        elem.setAttribute("id", "" + (int) Math.floor(Math.random() * Math.pow(10, 6)));
        
        return doc;
    }
    
    private List<String> snippetList() {
        File directory = new File("snippets/");
        File[] files = directory.listFiles(new Filter());
        List<String> snippetList = new ArrayList<String>();
        
        for (File file : files) {
            String filename = file.getName().substring(0, (file.getName().length() - 4)); // Remove extension
            snippetList.add(filename);
        }
        
        if (snippetList.size() <= 0) {
            snippetList = null;
        }
        
        return snippetList;
    }
    
    private void populateCombobox(List<String> files) {
        cbSnippets.removeAllItems();
        
        if (files != null) {
            for (String file : files) {
                cbSnippets.addItem(file);
            }
        }
        else {
            cbSnippets.addItem("None");
        }
    }
    
    private void readLiquibaseProperties() {
        try {
            // Open the file that is the first
            // command line parameter
            FileInputStream fstream = new FileInputStream("liquibase.properties");
            
            // Get the object of DataInputStream
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            
            String strLine;
            
            // Read File Line by Line
            while ((strLine = br.readLine()) != null) {
                if (strLine.startsWith("url:")) {
                    strLine = strLine.substring(4).trim();
                    
                    break;
                }
            }
            
            in.close();
            
            lblJDBC_URL.setText(strLine);
        } catch (Exception ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void loadTemplate() {
        Document doc = parseXMLfile("changeSet-Template.xml");
            
        txtScript.append(documentToString(doc));
        txtScript.setCaretPosition(txtScript.getCaretPosition() - 22); // Move cursor
        txtScript.requestFocus();
    }
    
    private void appOnLoad() {
        try {
            readLiquibaseProperties();
            loadTemplate();
            populateCombobox(snippetList());
        } catch (Exception ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FileDialog;
    private javax.swing.JFrame PopUp;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateSQL;
    private javax.swing.JComboBox cbSnippets;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblFilepath;
    private javax.swing.JLabel lblJDBC_URL;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextArea txtScript;
    // End of variables declaration//GEN-END:variables
}
